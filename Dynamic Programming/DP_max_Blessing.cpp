/*
Balika Vadhu- Problem
Send Feedback
Anandi and Jagya were getting married again when they have achieved proper age. Dadi Sa invited Alok Nath to do the kanyadaan and give blessings. Alok Nath has 2 blessings. Each bessing is in the form of a string consisting of lowercase charaters(a-z) only. But he can give only one blessing of K length because some priest told him to do so. Thus he decides to generate a blessing using the other two blessings. While doing this he wants to ensure that happiness brought into their life by his blessing is maximum.
The generated blessing is a common subsequence of length K of the two blessings he has. Happiness of the blessing he generates is calculated by the sum of ASCII values of characters in the blessing and he wants the happiness to be maximum. If he is not able to generate a common subsequence of length K then the happiness is 0 (zero). Alok Nath comes to you and asks you to find the maximum happiness that can be generated by the two blessings he has.
Input Specification
First line consists of number of test cases t. Each test case consists of two strings b1 (blessing 1),b2 (blessing 2) and an integer K, each of them in separate lines.
Output Specification
Output consists of t lines each containing an integer denoting the maximum happiness value that can be generated by the two blessings.
Constraint
1 <= t <= 50

1 <= length(b1) , length(b2) <= 100 

1 <= K <= 100
Sample Input
2
asdf
asdf
3
anandi
jagya
3
Sample Output
317
0
*/

#include<iostream>
#include<string>
#include<cstdio>
#include <cstring>
#include<algorithm>

//sarthak

using namespace std;

struct val{
	int b;
	int len;
};


val max(val a1, val a2)
{
    if(a1.b>a2.b)
        return a1;
    return a2;    
}

val findBDP(string s, string t, int l)
{
	int n = s.size();
	int m = t.size();

    val dp[n+1][m+1][l+1];
	//int lcs[n+1][m+1];

	for(int i=0;i<=n;i++)
	{
		for(int j=0;j<=m;j++)
		{
			for(int k=0;k<=l;k++)
            {
                if(i==0||j==0||k==0)
                {
                    dp[i][j][k]={0, 0};
                }
                else
                {
                    if(s[i-1]==t[j-1])
                    {
                        val a1 = dp[i-1][j-1][k-1];
                        val a2 = dp[i-1][j-1][k];
                        a1.b += s[i-1];
                        a1.len++;
                        dp[i][j][k]=max(a1, a2);
                    }
                    else
                    {
                        val a1 = dp[i][j-1][k];
                        val a2 = dp[i-1][j][k];
                       // a1.b += s[0];
                        //a1.l++;
                        dp[i][j][k]=max(a1, a2);
                    }
                }
            }
		}
	}

	//
	return dp[n][m][l];
}



int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	   string s1,s2;
	   int k;
	//cout<<ascii('a');
	cin>>s1>>s2>>k;
	//cout<<findBRec(s, t, k)<<endl;
    val ans = findBDP(s1, s2, k);
    //cout<<"Length : "<<ans.len<<endl;
	//cout<<"Blessing : "<<ans.b<<endl;	
	if(ans.len<k)
		cout<<"0"<<endl;
	
	else
		cout<<ans.b<<endl;
 	}
	
	return 0;
}
